// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Service;

namespace Project.Service.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Finnish_Swedish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssignmentProject", b =>
                {
                    b.Property<Guid>("AssignmentsAssignment_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectsProject_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignmentsAssignment_Id", "ProjectsProject_Id");

                    b.HasIndex("ProjectsProject_Id");

                    b.ToTable("AssignmentProject");
                });

            modelBuilder.Entity("Project.Service.Assignment", b =>
                {
                    b.Property<Guid>("Assignment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Assignment_Id");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("Project.Service.Project", b =>
                {
                    b.Property<Guid>("Project_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProjectType_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Project_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Project_Id");

                    b.HasIndex("ProjectType_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Project.Service.ProjectType", b =>
                {
                    b.Property<Guid>("ProjectType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectType_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectType_Id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("AssignmentProject", b =>
                {
                    b.HasOne("Project.Service.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentsAssignment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Service.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProject_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Service.Project", b =>
                {
                    b.HasOne("Project.Service.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectType_Id")
                        .HasConstraintName("FK_Project_ProjectType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("Project.Service.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
